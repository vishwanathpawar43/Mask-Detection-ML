# -*- coding: utf-8 -*-
"""Mask Detection B19EE064-CSE095

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nhmOWKZ7ua2jSlm_imOdkXZDg3RGCYou

Mounting the drive
"""

from google.colab import drive
drive.mount('/content/drive')

"""Extracting the zip"""

import os,zipfile,cv2
from google.colab.patches import cv2_imshow
z = zipfile.ZipFile('/content/drive/MyDrive/mini project/self-built-masked-face-recognition-dataset.zip')#self
z.extractall('.')
z = zipfile.ZipFile('/content/drive/MyDrive/mini project/Real-World-Masked-Face-Dataset-master.zip')
z.extractall('.')

cv2_imshow(cv2.imread('/content/self-built-masked-face-recognition-dataset/AFDB_masked_face_dataset/aidai/'+os.listdir('/content/self-built-masked-face-recognition-dataset/AFDB_masked_face_dataset/aidai')[0]))

cv2_imshow(cv2.imread('/content/self-built-masked-face-recognition-dataset/AFDB_face_dataset/aidai/'+os.listdir('/content/self-built-masked-face-recognition-dataset/AFDB_face_dataset/aidai')[0]))

"""Exploratory Data Analysis"""

import numpy as np
x = []
y = []
for i in os.listdir('/content/self-built-masked-face-recognition-dataset/AFDB_face_dataset'):
        image_path = '/content/self-built-masked-face-recognition-dataset/AFDB_face_dataset/'+i
        for j in os.listdir(image_path):
            image = cv2.imread(image_path+'/'+j)
            x.append(cv2.resize(image,(28,28)))
            y.append(0)
for i in os.listdir('/content/self-built-masked-face-recognition-dataset/AFDB_masked_face_dataset'):
        image_path = '/content/self-built-masked-face-recognition-dataset/AFDB_masked_face_dataset/'+i
        for j in os.listdir(image_path):
            image = cv2.imread(image_path+'/'+j)
            x.append(cv2.resize(image,(28,28)))
            y.append(1)
x = np.array(x).reshape(-1,28*28*3)
y = np.array(y).reshape(-1,1)

len(x)

y

"""Train-test Split"""

from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test = train_test_split(x,y,test_size=0.5,random_state=1)



"""Classifiers :

(1) SVM
"""

from sklearn.svm import SVC

model_svc=SVC()
model_svc.fit(X_train,y_train)

from sklearn.metrics import f1_score,accuracy_score

y_pred=model_svc.predict(X_test)

f1=f1_score(y_true=y_test,y_pred=y_pred)
f1

acc=accuracy_score(y_test,y_pred)
acc





"""(2) Logistic Regression"""

from sklearn.linear_model import LogisticRegression
model_logR=LogisticRegression()

model_logR.fit(X_train,y_train)

y_pred=model_logR.predict(X_test)

f1=f1_score(y_true=y_test,y_pred=y_pred)
f1

acc=accuracy_score(y_test,y_pred)
acc



"""(3) Perceptron"""

from sklearn.linear_model import Perceptron
percep=Perceptron(penalty='l1',tol=1e-3,alpha=0.0001, random_state=0)
percep.fit(x_train,y_train)

f1=f1_score(y_true=y_test,y_pred=yper_pred)
f1
# 0.8666666666666667

from sklearn.metrics import accuracy_score
yper_pred=percep.predict(x_test)
print("for alpha=0.0001:",accuracy_score(yper_pred,y_test))
#0.9937845303867403





"""(4) Multi Layer Perceptron (MLP)"""

from sklearn.neural_network import MLPClassifier
mlp=MLPClassifier()

mlp.fit(X_train,y_train)

y_pred=mlp.predict(X_test)

f1=f1_score(y_true=y_test,y_pred=y_pred)
f1

acc=accuracy_score(y_test,y_pred)
acc





"""(5) Random Forest :"""

from sklearn.ensemble import RandomForestClassifier
model_rf=RandomForestClassifier()
model_rf.fit(X_train,y_train)

y_pred=model_rf.predict(X_test)

f1=f1_score(y_true=y_test,y_pred=y_pred)
f1
# 0.7273724629731212

acc=accuracy_score(y_test,y_pred)
acc
# 0.9892739986187845



